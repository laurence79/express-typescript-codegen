swagger: '2.0'
info:
  title: Order and Pay Identity Service
  description: Provides authentication for Order and Pay.
  version: 1.2.0

paths:
  /health:
    get:
      operationId: getHealth
      summary: Checks that the service is up
      produces:
        - "application/json"
      responses:
        '200':
          description: Success
          schema:
            type: object
            properties:
              ok:
                type: boolean

  /anonymous:
    post:
      operationId: postAnonymous
      summary: Logs in or creates a new anonymous user
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Body"
          required: true
          schema:
            type: object
            properties:
              seed:
                type: string
                description: A unique ID for the anonymous user
                example: 4654164-546541561-465416541-1465146514
            required:
              - seed
      responses:
        '200':
          description: Credentials valid.
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'

  /create:
    post:
      operationId: postCreate
      summary: Create a new user
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Body"
          required: true
          schema:
            type: object
            properties:
              emailAddress:
                type: string
                example: user@domain.com
              password:
                type: string
                example: secret
              displayName:
                type: string
                example: "A User"
              photoUrl:
                type: string
                example: "http://photo.com/a.user"
            required: 
              - emailAddress
              - password
              - displayName
      responses:
        '200':
          description: User created.
          schema:
            type: object
            properties:
              uid:
                type: string
                example: 1234
            required: 
              - uid
        '400':
          $ref: '#/responses/BadRequestResponse'

  /login:
    post:
      operationId: postLogin
      summary: Exchanges credentials for a token.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: body
          name: "Body"
          required: true
          schema:
            type: object
            properties:
              emailAddress:
                type: string
                example: user@domain.com
              password:
                type: string
                example: secret
            required: 
              - emailAddress
              - password
      responses:
        '200':
          description: Credentials valid.
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'

  /verify:
    post:
      operationId: postVerify
      summary: Verifies a token, returning a new one if it should be replaced.
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/AuthenticationHeader'
      responses:
        '200':
          description: Token is valid, but should be replaced. Updated token
            included in response
          schema:
            $ref: '#/definitions/TokenResponse'
        '204':
          description: Token is valid and does not require replacement.
        '401':
          description: Unauthenticated.
  
  /grants:
    get:
      operationId: getGrants
      summary: Returns grants for the supplied filters
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/AuthenticationHeader'
        - in: query
          name: venueId
          type: string
          required: false
          description: The venue to return grants for
        - in: query
          name: userId
          type: string
          required: false
          description: The user to return grants for
        - in: query
          name: limit
          type: integer
          required: false
          description: The number of grants to return
        - in: query
          name: fromCreateDateTime
          type: string
          required: false
          description: The createDateTime to start from (inclusive)

      responses:
        '200':
          description: List of grants for the supplied filters
          schema:
            type: array
            items: 
              $ref: '#/definitions/GrantResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          description: Unauthenticated
        '403':
          description: Not authorised

    post:
      operationId: postGrants
      summary: Creates a grant
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/AuthenticationHeader'
        - in: body
          name: "Body"
          required: true
          description: The grant to create
          schema:
            $ref: '#/definitions/GrantRequest'
      responses:
        '200':
          description: Grant was created
          schema:
            $ref: '#/definitions/GrantResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          description: Unauthenticated
        '403':
          description: Not authorised

  /grants/{grantId}:
    get:
      operationId: getGrantById
      summary: Returns the grant with the supplied id
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/AuthenticationHeader'
        - in: path
          name: grantId
          type: string
          required: true
          description: The grantId to return

      responses:
        '200':
          description: Grant with the supplied id
          schema:
            $ref: '#/definitions/GrantResponse'
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          description: Unauthenticated
        '403':
          description: Not authorised
        '404':
          description: Grant with supplied id does not exist or has been
            deleted.

    delete:
      operationId: deleteGrantById
      summary: Deletes (revokes) the grant with the supplied id
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - $ref: '#/parameters/AuthenticationHeader'
        - in: path
          name: grantId
          type: string
          required: true
          description: The grantId to return
      responses:
        '200':
          description: Grant was deleted
        '400':
          $ref: '#/responses/BadRequestResponse'
        '401':
          description: Unauthenticated
        '403':
          description: Not authorised
        '404':
          description: Token with supplied id does not exist or has already been
            deleted.

responses:
  BadRequestResponse:
    description: Bad request
    schema:
      $ref: '#/definitions/BadRequest'

parameters:
  AuthenticationHeader:
    in: header
    name: authorization
    type: string
    required: true
    description: The authentication token, e.g. "Bearer <token>"
              
definitions:
  BadRequest:
    type: object
    properties:
      errors:
        type: array
        items:
          type: string
    required: 
      - errors
      
  TokenResponse:
    type: object
    properties:
      access_token:
        type: string
        example: dsfdsafdsa.dsafasdfasdfadsf.dsafsdfadsf
      expires_in:
        type: integer
        example: 3600
    required: 
      - access_token
      - expires_in

  GrantResponse:
    type: object
    properties: 
      id:
        type: string
      userId:
        type: string
      createDateTime:
        type: string
      grantedByUserId:
        type: string
      global:
        type: object
        properties: 
          role:
            type: string
            enum:
              - ADMIN
        required:
          - role
      venue:
        type: object
        properties: 
          id:
            type: string
          role:
            type: string
            enum:
              - MANAGER
        required:
          - id
          - role
    required:
      - id
      - userId

  GrantRequest:
    type: object
    properties: 
      userId:
        type: string
      global:
        type: object
        properties: 
          role:
            type: string
            enum:
              - ADMIN
        required:
          - role
      venue:
        type: object
        properties: 
          id:
            type: string
          role:
            type: string
            enum:
              - MANAGER
        required:
          - id
          - role
    required:
      - userId